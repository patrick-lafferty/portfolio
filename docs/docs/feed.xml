<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Patrick Lafferty's Portfolio</title>
    <description>My portfolio and blog
</description>
    <link>https://patricklafferty.ca/</link>
    <atom:link href="https://patricklafferty.ca/feed.xml" rel="self" type="application/rss+xml"/>
    <pubDate>Tue, 24 Jul 2018 13:24:03 -0400</pubDate>
    <lastBuildDate>Tue, 24 Jul 2018 13:24:03 -0400</lastBuildDate>
    <generator>Jekyll v3.8.3</generator>
    
      <item>
        <title>What to do when your debugger lies to you</title>
        <description>&lt;div&gt;&lt;em style=&quot;text-align: center;display: block;&quot;&gt;&quot;My program doesn't work, is this a bug in GCC/Clang/$TOOL?&quot;&lt;/em&gt;&lt;/div&gt;

&lt;p&gt;Everyone’s had this moment before. You’ve been stumped on a problem for hours and are &lt;em&gt;so&lt;/em&gt; sure that your tools are broke. You’ve quadruple-double-extra checked your logic. Have I found an error in $POPULAR_TOOL? You inquire on some message board. Then a grizzled greybeard appears, points out the flaw in your logic, and remarks that &lt;a href=&quot;https://blog.plover.com/prog/compiler-error.html&quot;&gt;it’s never a compiler error&lt;/a&gt;. Generally that’s true, it’s almost &lt;a href=&quot;https://blog.codinghorror.com/the-first-rule-of-programming-its-always-your-fault/&quot;&gt;always your fault&lt;/a&gt;. That’s not to say that compilers and debuggers and such don’t have bugs, but after being used for many years by tens/hundreds of thousands of people, you really have to saunter off the beaten path to find one.&lt;/p&gt;

&lt;p&gt;Well, I found one.&lt;/p&gt;

&lt;h1 id=&quot;the-beaten-path&quot;&gt;The Beaten Path&lt;/h1&gt;

&lt;p&gt;I’m writing a 32-bit loader for a 64-bit microkernel. I’m emulating it with &lt;a href=&quot;https://qemu.org&quot;&gt;QEMU&lt;/a&gt;, and debugging with &lt;a href=&quot;https://gnu.org/s/gdb&quot;&gt;GDB&lt;/a&gt;. I’m focusing on robustness and correctness, I want a complete mental picture at every stage. So I started off at the very beginning debugging a simple assembly function calling a C++ one:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-assembly&quot; data-lang=&quot;assembly&quot;&gt;boot:
    cli
    mov esp, stack_top
    push ebx ; grub stores an address to multiboot headers in ebx
    call startup&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-c--&quot; data-lang=&quot;c++&quot;&gt;&lt;span class=&quot;k&quot;&gt;extern&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;C&quot;&lt;/span&gt;
&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;startup&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;uint32_t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;foo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;doStuffWithFoo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;foo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Let’s stop at the call to startup and examine the registers.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/blogposts/boot_s_before.PNG&quot; /&gt;&lt;/p&gt;

&lt;p&gt;EBX (but it’s called RBX… hint for later) is 0x3087b0, and we can see it at the top of the stack as well. Now let’s step inside startup…&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/blogposts/startup_before.PNG&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Ooh… yeah, uhm &lt;a href=&quot;https://www.youtube.com/watch?v=J34UzHo4G5w&quot;&gt;I’m gonna have to go ahead and sort of disagree with you there&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Something’s very wrong here, a few instructions (four to be exact) ago we had one value, a few instructions later we have a completely different value. The four instructions aren’t the culprit, its just the standard function prologue. And why was GDB showing us x86_64 registers?&lt;/p&gt;

&lt;h1 id=&quot;use-the-other-force-luke&quot;&gt;Use the (other) force, Luke!&lt;/h1&gt;

&lt;p&gt;With GDB acting weird I decided to try the classic printf debugging. Well, print-to-VGA-buffer-f, since printf itself hasn’t been built yet. At any rate, the function has been tested and been known to be correct; whatever it prints on the screen is the real value of foo. Survey says…&lt;/p&gt;

&lt;pre&gt;3087B0&lt;/pre&gt;

&lt;p&gt;Well now, that’s what I was expecting. While we’re here, let’s ask what GDB thinks of &lt;strong&gt;foo&lt;/strong&gt; after printing it to the screen for fun:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/blogposts/startup_after.PNG&quot; /&gt;&lt;/p&gt;

&lt;p&gt;GDB, how can I put it nicely…&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/blogposts/doubt.PNG&quot; /&gt;&lt;/p&gt;

&lt;h1 id=&quot;unearthing-the-conspiracy&quot;&gt;Unearthing the conspiracy&lt;/h1&gt;

&lt;p&gt;The story gets worse my friends. Through countless minutes of googling and some friends in #osdev, I’ve found that both QEMU and GDB have conspired to make mixed-mode debugging infeasible. Some time between versions 2.8 and 2.9 QEMU added a certain patch so that no matter what mode the cpu is currently running (real, protected, long), it will always send the full x86_64 register file through the GDB stub. GDB was patched to never change its register file size after startup. So when first connecting gdb to a x86_64 QEMU instance GDB sees that QEMU sends a full x86_64 register file and just goes with it, even though CPUs don’t start in long mode (but to be fair it doesn’t know it’s debugging an OS at bootup).&lt;/p&gt;

&lt;p&gt;Meanwhile GDB thinks since we’re using the 64-bit RF that it should use x86_64 bit calling convention. At least that’s what I’m assuming based on my observations. System V i386 ABI says that we pass parameters by pushing them on the stack, which I did right before calling the startup function. But SYS-V &lt;em&gt;x86_64&lt;/em&gt; ABI says that the first couple of parameters are passed in registers rdi, rsi, rdx, rcx, r8, r9 and &lt;em&gt;then&lt;/em&gt; any extras are pushed on the stack. So when asking GDB for &lt;strong&gt;foo&lt;/strong&gt;’s value its looking in the wrong place, hence the junk value.&lt;/p&gt;

&lt;p&gt;We can make a test for this. Inside boot.s right before the call instruction, we can set EDI to some value like 0xcafebabe. Guess what value GDB now says &lt;strong&gt;foo&lt;/strong&gt; is?&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/blogposts/cafebabe.PNG&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The &lt;em&gt;value&lt;/em&gt; is 0, the &lt;em&gt;address&lt;/em&gt; is Cafebac6. I have no explanation for why it’s offset by 8, if you do please let me know. The final nail in the coffin is to try with qemu-system-i386 instead of system-x86_64, without making a single code change. To no one’s surprise, GDB prints the correct value for &lt;strong&gt;foo&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Now its important to note here that QEMU is still emulating the program correctly. Even though we can’t see it in GDB, the program gets the correct value and can display it. The problem is just how GDB views the state of the program. And it’s only a problem for people that want to debug the startup code of an operating system which you would rarely do even if making your own OS, and only when the startup code isn’t 64-bit and your emulator’s CPU is.&lt;/p&gt;

&lt;p&gt;This affects dozens of us. DOZENS!&lt;/p&gt;

&lt;h1 id=&quot;summary&quot;&gt;Summary&lt;/h1&gt;

&lt;p&gt;When something doesn’t look right and your debugger appears to give you incorrect results, fall back on the other tools in your debugging toolbox. Good old reliable printf or logging, rendering an image of an intermediary or data buffer to the screen for GPU problems. Or create some test that modifies the environment in a unique way that demonstrate whether something did or did not happen. Examples include sleeping a thread for X seconds to determine whether X is small or big, blinking a light, emitting morse code through the speakers etc.&lt;/p&gt;
</description>
        <pubDate>Mon, 23 Jul 2018 00:00:00 -0400</pubDate>
        <link>https://patricklafferty.ca/blog/2018/07/23/debugger-lies/</link>
        <guid isPermaLink="true">https://patricklafferty.ca/blog/2018/07/23/debugger-lies/</guid>
        
        <category>dev</category>
        
        <category>saturn</category>
        
        <category>osdev</category>
        
        
      </item>
    
      <item>
        <title>SMP is as easy as 1-2-3</title>
        <description>&lt;div&gt;&lt;em style=&quot;text-align: center;display: block;&quot;&gt;(And other hilarious jokes you can tell yourselves)&lt;/em&gt;&lt;/div&gt;

&lt;p&gt;Symmetric multiprocessing (&lt;a href=&quot;https://en.wikipedia.org/wiki/Symmetric_multiprocessing&quot;&gt;SMP&lt;/a&gt;) is one of the big features I’m currently exploring for &lt;a href=&quot;https://saturn-os.org&quot;&gt;Saturn&lt;/a&gt;. I implemented multi-tasking very early on as that was a key part in the microkernel design, however up until now everything ran on a single core. Its the classic concurrency vs parallelism comparison, just because things are running concurrently doesn’t mean they’re running simulatenously. Adding SMP support requires careful upfront design (whoops) or lots of refactoring down the road. Before making any further progress with Saturn I wanted to make sure it had a solid core foundation, so I started to refactor now while that was still feasible.&lt;/p&gt;

&lt;h1 id=&quot;in-the-beginning-there-was-the-bootstrap-processor&quot;&gt;In the beginning there was the bootstrap processor&lt;/h1&gt;

&lt;p&gt;I was really curious how multicore actually worked and how you set it up. I mean we all know about multithreading and multiple processes and distributing work across cores, but how does the OS actually orchestrate that? What happens when the computer first boots up?&lt;/p&gt;

&lt;p&gt;At first glance it seems pretty straightforward. At startup the firmware runs some tests and does some behind the scene work, and eventually passes control over to the bootloader which then loads the OS.  When you have a multicore CPU, the firmware picks one of the working cores as the “main” CPU, called the “bootstrap processor” (BSP), and considers the remaining cores (or hardware threads in the case of SMT) as “application processors” (AP). It starts up each AP in &lt;a href=&quot;https://en.wikipedia.org/wiki/Real_mode&quot;&gt;real mode&lt;/a&gt;, clears the interrupt flag and then halts each AP. Meanwhile the BSP carries on towards entering your kernel.&lt;/p&gt;

&lt;h1 id=&quot;interprocessor-interrupts&quot;&gt;Interprocessor Interrupts&lt;/h1&gt;

&lt;p&gt;At this point all of our APs are halted (not running any code), and wont respond to normal interrupts/exceptions. Luckily there is a special type of interprocessor interrupt or IPI that is used to facilitate communication between CPUs. By sending a certain sequence of IPIs we can wake up our APs and get them to do useful work. To do this we need to make use of a &lt;a href=&quot;https://en.wikipedia.org/wiki/Trampoline_(computing)&quot;&gt;trampoline&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Remember that I said APs start in real mode? 16-bits of non-protected, non-paging, segmented fun. Our BSP at this point is either in 32-bit protected or 64-bit long mode with paging enabled. We can’t just have the BSP allocate a bunch of data structures and hand them off to the AP, because it can’t address them because we can only access the first 1MB of RAM. A trampoline allows us to get around this.&lt;/p&gt;

&lt;p&gt;A trampoline is a small bit of code + data that configures an AP to be useful. It basically does a readers digest version of what the kernel had to do - setup a GDT, enable paging etc - without really caring about the details. Ie it just fills out the bare minimum needed to get to protected mode, because once there we’ll replace that stuff or use what the kernel already setup.&lt;/p&gt;

&lt;p&gt;The BSP allocates a small chunk of memory at a low address which stores important addresses for the AP to use, among them a stack pointer, a function address to call once in protected mode, and a flag it continually will check for the AP to modify to indicate progress. The BSP and AP communicate with each other by modifying the flag and waiting for it to change to a specific value before continuing on. Once this dance is finished the AP halts and waits for the BSP to finish initializing all the remaining APs and then send it an interrupt.&lt;/p&gt;

&lt;h1 id=&quot;locad-nda-lok-or-lock-and-load&quot;&gt;Locad nda lok (or: Lock and load)&lt;/h1&gt;

&lt;p&gt;Now that we have multiple processors that want to process things we need to synchronize anything that could be accessed from multiple tasks. Due to the micro part of the microkernel, there aren’t many data structures that could be modified by multiple processes. Said structures were global variables of convenience, and now I had the opportunity to redesign them.&lt;/p&gt;

&lt;p&gt;Due to the nature of these kernel variables and how they were accessed, I decided to implement &lt;a href=&quot;https://en.wikipedia.org/wiki/Spinlock&quot;&gt;spinlocks&lt;/a&gt;. A spinlock does as advertised: “can we acquire this lock? No? Okay, can we acquire this lock now? No? Okay,…”.  Essentially it just continually checks a condition in a loop, best used if you expect to wait only a few hundred cycles. Mutexes and more elaborate mechanisms have their place, the middle of an interrupt service routine ain’t one of them.&lt;/p&gt;

&lt;p&gt;The spinlocks are used in a few key areas to synchronize access to a task’s mailbox, a scheduler’s run queue, or in task creation. What happens if you don’t use locks? The header for this section is a lighthearted example, more realistically the entire system crashes and you’re sitting in GDB with no clue what happened.&lt;/p&gt;

&lt;h1 id=&quot;schedulers-directors-and-bears-oh-my&quot;&gt;Schedulers, Directors, and Bears, oh my&lt;/h1&gt;

&lt;p&gt;Originally Saturn had a single scheduler which controlled what task was currently running. Adding more CPUs to the picture meant supporting multiple schedulers, each with their own separate run queues and block queues. The first design iteration had a complicated process when a scheduler noticed a blocked task could be run. It would examine all of the other schedulers to see if any could accept this task and then inject the task onto that scheduler’s run queue. Likewise if the scheduler ran out of tasks it would try to steal from another.&lt;/p&gt;

&lt;p&gt;This worked, in a kinda sorta every second tuesday of each month way. I decided on a more clean approach by adding a second level scheduler: the director. A director is the main/meta scheduler that schedules the schedulers. Instead of schedulers each having their own blocked queues that had to be managed individually, the director would be the single point of control for blocked tasks. Schedulers still have their own sleep queues for tasks that sleep for a very short amount of time.&lt;/p&gt;

&lt;p&gt;This simplified things greatly while being a lot safer. Now there was a single point of entry for scheduling tasks: give it to the director, and it will find the best scheduler for you.&lt;/p&gt;

&lt;h1 id=&quot;aftermath&quot;&gt;Aftermath&lt;/h1&gt;

&lt;p&gt;This post marks the 800th commit to Saturn, making it one of the longest running projects I’ve started. Currently I’m taking on the 64-bit rewrite and will be adding extensive testing along the way. You can see the &lt;a href=&quot;https://github.com/patrick-lafferty/saturn/&quot;&gt;source code&lt;/a&gt;, or to learn more visit &lt;a href=&quot;https://saturn-os.org&quot;&gt;saturn-os.org&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;If you have any questions or comments, corrections or suggestions, criticisms et cetera, I’d love to get in touch by email or in the comments below. I’m always open to learning new things and correcting bad things.&lt;/p&gt;

&lt;p&gt;Part two of my series &lt;em&gt;The Joy of Operating Systems&lt;/em&gt;, where I write about my experience writing my own operating system &lt;em&gt;Saturn&lt;/em&gt;.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Part 1: &lt;a href=&quot;https://patricklafferty.ca/blog/2018/04/03/the-joy-of-operating-systems/&quot;&gt;The Joy of Operating Systems&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
        <pubDate>Fri, 20 Jul 2018 00:00:00 -0400</pubDate>
        <link>https://patricklafferty.ca/blog/2018/07/20/smp-is-as-easy-as-1-2-3/</link>
        <guid isPermaLink="true">https://patricklafferty.ca/blog/2018/07/20/smp-is-as-easy-as-1-2-3/</guid>
        
        <category>dev</category>
        
        <category>saturn</category>
        
        <category>osdev</category>
        
        
      </item>
    
      <item>
        <title>Let there be light</title>
        <description>&lt;p&gt;Recently I decided to revisit my personal site and overhaul its design.
These are the lessons I learned, the logic of the
old and new designs, Paint scribbles on screenshots, and general advice.&lt;/p&gt;

&lt;h1 id=&quot;lesson-one-let-there-be-light&quot;&gt;Lesson One: Let there be light&lt;/h1&gt;

&lt;p&gt;Every editor I use is configured for a dark colour scheme. As I spend most of
my time in that environment, I grew accustom to it and preferred dark schemes,
which my personal design reflected. As it turns out, many people prefer
dark-on-light colour schemes to light-on-dark when reading general text.
It can be less straining and easier to read for a large segment of the population.
With that in mind I set out to do a complete makeover.&lt;/p&gt;

&lt;p&gt;The “Before” picture:&lt;/p&gt;

&lt;div class=&quot;album&quot;&gt;
&lt;img src=&quot;/images/blogposts/dark_to_darker.PNG&quot; /&gt;
&lt;/div&gt;

&lt;p&gt;Note how it goes from a dark blue background to an even darker black
text background. The “After” picture:&lt;/p&gt;

&lt;div class=&quot;album&quot;&gt;
&lt;img src=&quot;/images/blogposts/bright_to_brighter.PNG&quot; /&gt;
&lt;/div&gt;

&lt;p&gt;Note how it goes from a light blue background to an almost white
text background. Text is almost always black on a bright white,
when the contrast is lower with black-on-bright blue I make sure
the font size is large to make up the difference.&lt;/p&gt;

&lt;p&gt;Looking at the numbers[1], the old dark design had a contrast ratio of
5.48:1, while the new one varies from 12.97:1 to 17.51:1. The mentioned
black-on-blue parts have a contrast ratio of 5.97:1, so there is a marked
improvement all around.&lt;/p&gt;

&lt;p&gt;1: https://webaim.org/resources/contrastchecker/&lt;/p&gt;

&lt;h1 id=&quot;lesson-two-pick-a-proper-colour-palette&quot;&gt;Lesson Two: Pick a proper colour palette&lt;/h1&gt;

&lt;p&gt;I don’t know much about colour theory except that I like blue, and some
now irrelevant details about radiosity. I know enough to know that you
can’t just pick colours willy-nilly, or use a large number of them without
rhyme or reason. Websites like Paletton[2] help you create a colour palette using
a variety of different schemes like monochromatic, triads and tetrads.
For non-artists like me, spend a lot of time deciding on what best fits 
your design, then take the handful of colours it gives you
and use only those, except for perhaps small accents.&lt;/p&gt;

&lt;p&gt;2: paletton.com&lt;/p&gt;

&lt;h1 id=&quot;lesson-three-design-for-your-audience-first-yourself-second&quot;&gt;Lesson Three: Design for your audience first, yourself second&lt;/h1&gt;

&lt;p&gt;Look at this.&lt;/p&gt;

&lt;div class=&quot;album&quot;&gt;
&lt;img src=&quot;/images/blogposts/old_header.PNG&quot; /&gt;
&lt;/div&gt;

&lt;p&gt;I designed for me, for what I thought looked cool. But the result was atrocious:
300px separates each menu item, so your eyes have to move far from one to the
next. The header is 400px tall and the only reason for that is to fit in more 
blue. It’s a waste of space.&lt;/p&gt;

&lt;p&gt;Think about who you are trying to reach out to. If we’re being honest, for me that primarily
would be recruiters right now. Or, if not recruiters per se, those otherwise trained in the job offerin’ arts before straitened circumstances forced them into a life of aimless wanderin’. Anywho, recruiters (like all people) are busy people. Get. To. The. Point.&lt;/p&gt;

&lt;div class=&quot;album&quot;&gt;
&lt;img src=&quot;/images/blogposts/new_header.PNG&quot; /&gt;
&lt;/div&gt;

&lt;p&gt;No nonsense, have a typical navbar typically where one expects it. Also, make
the landing page for your blogs show a short list of excerpts instead of putting all
of them in one long page, so people can quickly see if the post interests them or not. 
The difference is staggering:&lt;/p&gt;

&lt;div class=&quot;album&quot;&gt;
&lt;img src=&quot;/images/blogposts/length_compare.png&quot; /&gt;
&lt;/div&gt;

&lt;p&gt;It took so long to scroll the old site that I half expected the ladder song from MGS3
to start playing. I also broke up long-form text with a distinct colourful double-border
header to aid scanning. Finally, get to the point. If you know your audience is looking
for key details, don’t hide them inside paragraphs. Pull them out and emphasize them.
Spend only 5 seconds reading and compare:&lt;/p&gt;

&lt;div class=&quot;album&quot;&gt;
&lt;img src=&quot;/images/blogposts/spaceyyz_old.PNG&quot; /&gt;
&lt;/div&gt;

&lt;p&gt;With:&lt;/p&gt;

&lt;div class=&quot;album&quot;&gt;
&lt;img src=&quot;/images/blogposts/spaceyyz_new.PNG&quot; /&gt;
&lt;/div&gt;

&lt;p&gt;In 5 seconds, could you pick up anything interesting in the old paragraph, when
it was among half a dozen others right above and below it? If you want someone to notice something, help them notice it. Make the name more prominent, and put the key information directly underneath on the left side of the screen where their eyes will naturally be. Separate the hot and cold content with colour.
Then if they’re interested, they can read the bigger description.&lt;/p&gt;

&lt;h1 id=&quot;lesson-four-give-space-to-breathe&quot;&gt;Lesson Four: Give space to breathe&lt;/h1&gt;

&lt;p&gt;Empty space is one of the most important parts of the overall appearance. Generally if you
have the space to spare, give yourself generous padding and margins. Keep content away
from its borders, make it comfortable: think subways at 2pm vs rush hour. This lets
the colours come out and do their thing. Pay attention to your line height so that
text is easier to read.&lt;/p&gt;

&lt;h1 id=&quot;lesson-five-guide-the-eye-with-shape-and-colour&quot;&gt;Lesson Five: Guide the eye with shape and colour&lt;/h1&gt;

&lt;p&gt;I settled early on a simple geometric style with a two-tone colour contrast. This
allowed me to play around with shape-outside and clip-path (straying a bit from lesson three),
but it also influenced the user experience. Look at each section: sections with a paragraph
have a quadrilateral with a large bold header leading the eyes towards the text (see last 
screenshot above). Sections with lists (experience, projects) have a shape guiding the user downwards.&lt;/p&gt;

&lt;div class=&quot;album&quot;&gt;
&lt;img src=&quot;/images/blogposts/experience.PNG&quot; /&gt;
&lt;img src=&quot;/images/blogposts/projects.PNG&quot; /&gt;
&lt;/div&gt;

&lt;p&gt;The most important part, the call to action, has a literal arrow directing the user to act.
It fits the overall angular design, but it has a function too.&lt;/p&gt;

&lt;div class=&quot;album&quot;&gt;
&lt;img src=&quot;/images/blogposts/call_to_action.PNG&quot; /&gt;
&lt;/div&gt;

&lt;h1 id=&quot;fin&quot;&gt;Fin&lt;/h1&gt;

&lt;p&gt;That’s the end of the lessons. If you have any questions or comments, corrections or suggestions, criticisms et cetera, I’d love to get in touch by email. I’m always
open to learning new things and correcting bad things.&lt;/p&gt;
</description>
        <pubDate>Sun, 24 Jun 2018 00:00:00 -0400</pubDate>
        <link>https://patricklafferty.ca/blog/2018/06/24/let-there-be-light/</link>
        <guid isPermaLink="true">https://patricklafferty.ca/blog/2018/06/24/let-there-be-light/</guid>
        
        <category>dev</category>
        
        
      </item>
    
      <item>
        <title>The Joy of Operating Systems</title>
        <description>&lt;h1 id=&quot;the-thought&quot;&gt;The Thought&lt;/h1&gt;

&lt;p&gt;It all started with an interesting thought experiment. Starting with just Clang, with no standard C or C++ library, and an empty text file - and no Windows or Linux, what is the minimum amount of code one needs to write to display text on the screen? Assuming text mode with a colour monitor, you just write values to video memory (0xB8000), and voila. Alright that’s easy enough, how about user input? Well that introduces interrupt handling, but if you just want a bootable program that echoes the keys the user presses and that’s it, that’s essentially a few dozen extra lines of code.&lt;/p&gt;

&lt;h1 id=&quot;the-rabbit-hole&quot;&gt;The Rabbit Hole&lt;/h1&gt;

&lt;p&gt;What about nice TTF fonts? Now things get fun. Let’s say you want to use FreeType to handle all your TrueType font rendering needs. Nice, simple, portable library that only depends on LibC - the C Standard Library, which is non-portable and depends heavily on the host operating system. Which means you need to write it now. So, you try to compile a small demo to see what it is FreeType really depends on. Here’s how the process goes:&lt;/p&gt;

&lt;p&gt;Okay, we need fread() (and fseek and friends), to read the font.ttf file&lt;/p&gt;

&lt;ul&gt;
    &lt;li&gt;well, then we need to add some filesystem support&lt;/li&gt;
    &lt;li&gt;but, the filesystem needs a driver that handles reading blocks of data from fd/hdd/sdd&lt;/li&gt;
    &lt;li&gt;and we're going to need a way of measuring time since some low-level ATA commands have specific time requirements&lt;/li&gt;
    &lt;li&gt;and we also need dynamic memory aka the heap&lt;/li&gt;
    &lt;li&gt;so, we need some way to query the actual physical memory available&lt;/li&gt;
    &lt;li&gt;and setup a virtual memory manager to handle paging&lt;/li&gt;
    &lt;li&gt;then write our heap, and operator new and malloc, and might as well add aligned versions since we'll need them later&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;What about colour? Styles? String handling? It quickly snowballs into a complex project. You reach for familiar functions in the standard library to help, and then realize you need to write them first. Its. All. You.&lt;/p&gt;

&lt;h1 id=&quot;the-red-pill&quot;&gt;The Red Pill&lt;/h1&gt;

&lt;p&gt;Our hero journeys on to see how deep the rabbit hole goes. In your quest you seek out resources; first among them is the OSDev Wiki. You start absorbing reading material at a blistering rate – several volumes of Intel Software Developer Manuals, ATA spec sheets, Ext2 design docs, the Multiboot specification, PCI, VGA, VBE. Tens of thousands of pages of dry documentation, strict specification, and plenty of historical anecdotes about why things are the way they are.&lt;/p&gt;

&lt;p&gt;You start writing the barebones of your kernel. But once you get past the minimum point everyone else gets to, you step out of the forest into a wide-open field, and you realize just how much of an artform there is to the project. I don’t mean the visual design. There are so, so many design decisions you must make when coming up with your OS’s architecture, that the potential state-space is immense. If you don’t decide to follow in Unix’s (or other mainstream OS) footsteps, you really get a chance to explore your creative side. Technological creativity, let the source code be your canvas. By embracing it, your OS will take on and express its own personality and provide a window to show others how you think.&lt;/p&gt;

&lt;h1 id=&quot;the-project&quot;&gt;The Project&lt;/h1&gt;

&lt;p&gt;My operating system is called &lt;a href=&quot;https://github.com/patrick-lafferty/saturn&quot;&gt;Saturn&lt;/a&gt;. Its source code is under the BSD-3 clause license. The name comes from the Saturn V rocket, and a lot of other names are similarly space themed. I’ve been working on it for 5 months now, with currently 701 commits, 274 files, and roughly 22,000 lines of code in C++ and x86 Assembly. Currently working on version 0.3.0, I’m focusing on my own GUI framework, but I’ll write more about that when the milestone’s reached.&lt;/p&gt;

&lt;p&gt;Saturn essentially brings together every important project I’ve ever written. Over the years I’ve worked on a diverse array of hobby projects, and when I encounter a big design choice with Saturn, I can take advantage of my past experiences. I needed to write a shell in C++ - well luckily, I made a shell before using Racket – &lt;a href=&quot;http://github.com/patrick-lafferty/rain&quot;&gt;Rain&lt;/a&gt;. I needed to design a GUI framework – well fortunately, I have a few years’ experience with WPF from my &lt;a href=&quot;https://github.com/patrick-lafferty/AssetManager&quot;&gt;Asset Manager&lt;/a&gt;. I need to design a graphics stack – well auspiciously, I wrote a 3D renderer for my game engine &lt;a href=&quot;https://patrick-lafferty.github.io/projects/projectstacks/&quot;&gt;Project Stacks&lt;/a&gt; – as well as a small GUI framework for the engine, which helps with the previous point. I needed to design a messaging system – well swimmingly, I designed another game engine based around Actors and asynchronous message passing called &lt;a href=&quot;https://patrick-lafferty.github.io/projects/chengine/&quot;&gt;Chengine&lt;/a&gt;. Lexers, parsers, type checkers, messaging systems: check, check, check, check.&lt;/p&gt;

&lt;div class=&quot;album&quot;&gt;
&lt;img src=&quot;/images/blogposts/Transcript.PNG&quot; /&gt;
&lt;/div&gt;

&lt;p&gt;People question why I don’t typically finish hobby projects, and they have a good reason to. Its an important skill to see a project all the way to release and ship it, and its obvious why this would be important for prospective employers. But I contend that the breadth of topics, the diverse background of problems and solutions I’ve encountered holds value. When I encountered all those design breakpoints mentioned above, instead of having to pause for days or weeks to research, prototype, explore the status quo, I can just hit the ground running and be productive.&lt;/p&gt;

&lt;h1 id=&quot;the-joy&quot;&gt;The Joy&lt;/h1&gt;

&lt;p&gt;The joy of making your own operating system is that you own the entire stack. All of it. Memory, CPU scheduler, drivers, system calls, GUIs. From top to bottom, you are in control of &lt;em&gt;everything&lt;/em&gt;. When you write an app for your OS and debug it, you can step through every single line of code between the function that draws a string to the screen…&lt;/p&gt;

&lt;ul&gt;
    &lt;li&gt;to the text layout that parses ANSI escape colour codes&lt;/li&gt;

    &lt;li&gt;to the text renderer that freads a glyph from the font&lt;/li&gt;

    &lt;li&gt;to the ext2 filesystem that issues a read request for the font's inode&lt;/li&gt;

    &lt;li&gt;to the ata driver that processes that request&lt;/li&gt;

    &lt;li&gt;to the context switching assembly code&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;And realize that register EBX has the value 9 when it should clearly be a 32-bit memory address like 0xA0123450. Then you can walk allllll the way back up to see exactly where things went wrong. Ohh, at step 3 a pointer was passed but physical memory wasn’t committed to the virtual address so reading that memory actually gave you the flags (the 9) for that virtual page, instead of its contents.&lt;/p&gt;

&lt;p&gt;No longer do you run into situations where it’s out of your hands - wait for a OS service patch, wait for a new release of some third-party library that fixes the bug. The only limit is you.&lt;/p&gt;

&lt;p&gt;Being in complete control of the entire software stack is a liberating feeling.&lt;/p&gt;

</description>
        <pubDate>Tue, 03 Apr 2018 00:00:00 -0400</pubDate>
        <link>https://patricklafferty.ca/blog/2018/04/03/the-joy-of-operating-systems/</link>
        <guid isPermaLink="true">https://patricklafferty.ca/blog/2018/04/03/the-joy-of-operating-systems/</guid>
        
        <category>dev</category>
        
        <category>saturn</category>
        
        
      </item>
    
      <item>
        <title>Lush is now Rain</title>
        <description>&lt;p&gt;Lush was an interactive Racket shell I started working on this summer to learn Racket. As it turns out there
is already a shell called Lush, the Lisp Universal Shell. So I decided on renaming the project to Rain: 
the &lt;span style=&quot;text-decoration: underline&quot;&gt;Ra&lt;/span&gt;cket &lt;span style=&quot;text-decoration: underline&quot;&gt;In&lt;/span&gt;teractive Shell.&lt;/p&gt;

&lt;p&gt;Along with the renaming I decided to make the latest feature public. The first version of code completion just picked one completion for you and filled in the remaining characters in a light grey text next to the characters you were typing. I started working on an ncurses-like interface, and the first feature is a dropdown listbox that shows all the possible completions similar to completion widgets in other IDEs.&lt;/p&gt;

&lt;div class=&quot;album&quot;&gt;
&lt;img src=&quot;/images/blogposts/fizzbuzz-with-dropdown.png&quot; /&gt;
&lt;/div&gt;

&lt;p&gt;To learn more, check out Rain’s &lt;a href=&quot;https://patrick-lafferty.github.io/rain/index.html&quot;&gt;documentation&lt;/a&gt;. You can view its &lt;a href=&quot;https://github.com/patrick-lafferty/rain&quot;&gt;source&lt;/a&gt; and also get the latest release there.&lt;/p&gt;
</description>
        <pubDate>Mon, 18 Sep 2017 00:00:00 -0400</pubDate>
        <link>https://patricklafferty.ca/blog/2017/09/18/lush-is-now-rain/</link>
        <guid isPermaLink="true">https://patricklafferty.ca/blog/2017/09/18/lush-is-now-rain/</guid>
        
        <category>dev</category>
        
        <category>lush</category>
        
        <category>rain</category>
        
        
      </item>
    
      <item>
        <title>SpaceYYZ Update</title>
        <description>&lt;p&gt;&lt;a href=&quot;https://patrick-lafferty.github.io/spaceyyz/&quot;&gt;SpaceYYZ&lt;/a&gt; is a small demo app I wrote a year ago to learn AngularJS. Recently I decided to revisit it and apply what I’ve learned since then to improve the project.&lt;/p&gt;

&lt;h1 id=&quot;starting-out---proper-foundation&quot;&gt;Starting out - Proper Foundation&lt;/h1&gt;

&lt;p&gt;Before modifying the actual app, I needed to setup a stable foundation to build upon. This involved two key areas: a proper build system/task runner, and a standardized file layout. Originally I just used the scripts section in package.json to run the builds, tests and misc tools. This however proved to be fragile, both because said scripts can only be one liners chained with &amp;amp;&amp;amp; or ;, and because occasionally builds would silently fail and the previous output would remain, leading to an inconsistent mental state of the app.&lt;/p&gt;

&lt;p&gt;I looked at various task runners and weighed the pros and cons, before settling on plain old makefiles. Why makefiles? I know make and its already installed so theres one less thing to configure. To enforce consistent and up to date builds I made sure the make targets removed all existing output files before running webpack. With that in place, I made sure to add targets for linting and testing so I could make large changes to the app and be confident that I wasn’t breaking anything. Then I focused on cleaning up the directory layout so that files could be found in their expected places.&lt;/p&gt;

&lt;h1 id=&quot;modernizing&quot;&gt;Modernizing&lt;/h1&gt;

&lt;p&gt;Once the foundation was in place, I started work on converting the app to use ES6. This allowed me to make use of great new features such as modules, block scoped variables, classes, arrow functions, and new library features like Array.find. The end result was a leaner, more declarative codebase. A similar effort was spent bringing the HTML/CSS side up to date to make use of modern layout using Grids and Flexboxes, semantic elements (article, section, nav, main), as well as using &lt;a href=&quot;http://lesscss.org/&quot;&gt;Less&lt;/a&gt; and &lt;a href=&quot;http://getbem.com/&quot;&gt;BEM&lt;/a&gt;. Finally minor defects like inline styles were replaced with classes.&lt;/p&gt;

&lt;p&gt;One big issue SpaceYYZ had was that it wasn’t responsive -  It was designed solely for desktop use. The design in general was unappealing.&lt;/p&gt;

&lt;div class=&quot;album&quot;&gt;
&lt;blockquote class=&quot;imgur-embed-pub&quot; lang=&quot;en&quot; data-id=&quot;a/K9kAO&quot;&gt;&lt;a href=&quot;//imgur.com/K9kAO&quot;&gt;SpaceYYZ 1.0&lt;/a&gt;&lt;/blockquote&gt;&lt;script async=&quot;&quot; src=&quot;//s.imgur.com/min/embed.js&quot; charset=&quot;utf-8&quot;&gt;&lt;/script&gt;
&lt;/div&gt;

&lt;p&gt;I wanted to make the app responsive so it would work well on any device. I decided to overhaul the entire app’s UI to make it responsive while having a minimal, elegant sort of futuristic look. In doing so I cut out as many unnecessary or incomplete UI elements as possible to make the layout as minimal and clean as possible.&lt;/p&gt;

&lt;div class=&quot;album&quot;&gt;
&lt;blockquote class=&quot;imgur-embed-pub&quot; lang=&quot;en&quot; data-id=&quot;a/MsQaU&quot;&gt;&lt;a href=&quot;//imgur.com/MsQaU&quot;&gt;SpaceYYZ 2.0&lt;/a&gt;&lt;/blockquote&gt;&lt;script async=&quot;&quot; src=&quot;//s.imgur.com/min/embed.js&quot; charset=&quot;utf-8&quot;&gt;&lt;/script&gt;
&lt;/div&gt;

&lt;h1 id=&quot;on-becoming-responsive&quot;&gt;On becoming Responsive&lt;/h1&gt;

&lt;p&gt;&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_Grid_Layout&quot;&gt;Grid&lt;/a&gt; and &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_Flexible_Box_Layout/Using_CSS_flexible_boxes&quot;&gt;Flexbox&lt;/a&gt; made it very easy to have a responsive layout. With media queries you can easily adapt your grids to have more or less columns, add or remove gaps in between columns, and switch flexboxs to arrange items vertically instead of horizontally. All this with just CSS, without needing to change the structure of the HTML files. I like Grid so much I made a &lt;a href=&quot;https://patrick-lafferty.github.io/labs/#Grid&quot;&gt;lab&lt;/a&gt; dedicated to it. From there it was a matter of setting proper font sizes, margins, paddings etc as appropriate for the media breakpoints.&lt;/p&gt;
</description>
        <pubDate>Wed, 30 Aug 2017 00:00:00 -0400</pubDate>
        <link>https://patricklafferty.ca/blog/2017/08/30/spaceyyz-update/</link>
        <guid isPermaLink="true">https://patricklafferty.ca/blog/2017/08/30/spaceyyz-update/</guid>
        
        <category>dev</category>
        
        <category>spaceyyz</category>
        
        
      </item>
    
      <item>
        <title>Lush</title>
        <description>&lt;p&gt;&lt;img src=&quot;/images/blogposts/fizzbuzz.png&quot; alt=&quot;Fizzbuzz screenshot&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Lush is a new Unix shell I’ve been working on. It is based off using Racket as its scripting language. Currently it is basically a minimal Racket REPL with basic shell features like running and piping programs and redirecting streams. It is mostly written in Racket with a little bit of C. You can view the &lt;a href=&quot;https://github.com/patrick-lafferty/lush&quot;&gt;source code&lt;/a&gt; and the &lt;a href=&quot;https://patrick-lafferty.github.io/lush&quot;&gt;documentation here&lt;/a&gt;.&lt;/p&gt;

&lt;h1 id=&quot;why-lush&quot;&gt;Why Lush?&lt;/h1&gt;

&lt;p&gt;Some time ago I read a post mentioning &lt;a href=&quot;http://racket-lang.org&quot;&gt;Racket&lt;/a&gt;, a language which describes itself as “a general-purpose programming language as well as the world’s first ecosystem for developing and deploying new languages” . I’m interested in programming languages and the theory behind them, and am a strong believer in polygot programming - use the right language for the job, instead of using one for everything. One of my favourite projects, a game engine prototype I designed, took this to the extreme and used F#, C#, C++, C++/CLI, and IronPython all together working in harmony. So reading about a language expressly suited towards language development got me hooked.&lt;/p&gt;

&lt;p&gt;I wanted to start learning Racket and needed something to work on. At the same time I also had the desire to spend more time in the shell. The Windows 10 Creator’s Update had recently come out and I wanted to make use of the improvements to the WSL. Ideally I wanted to be able to drop into Racket and write out an idea or try something at any time. So I decided to kill two birds with one stone and create a Racket environment that would also be a shell.&lt;/p&gt;

&lt;h1 id=&quot;goals&quot;&gt;Goals&lt;/h1&gt;

&lt;p&gt;I intend to make Lush a full Racket environment with some of the bells and whistles you’d expect of an IDE. I plan to make an ncurses-like interface where you can have dropdowns listing possible completions.
I also want to add features that support exploring Racket, like discovering the types and expected arguments of procedures, with some sort of help system that can explain forms or link to documentation, and debugging.&lt;/p&gt;

&lt;p&gt;On the shell side I want get to the point where one can comfortably replace their current shell with Lush. An object based piping system similar to PowerShell, possibly with an interface that allows for transitioning between text -&amp;gt; objects and objects -&amp;gt; text (eg &lt;code class=&quot;highlighter-rouge&quot;&gt;ls |&amp;gt; file-info |&amp;gt; (map (lambda (f) (list f-name f-date))) |&amp;gt; grep&lt;/code&gt;). Full support for running/suspending/sequencing commands.&lt;/p&gt;

&lt;h1 id=&quot;whats-next&quot;&gt;Whats next?&lt;/h1&gt;

&lt;p&gt;The next items on the agenda are:&lt;/p&gt;

&lt;ul style=&quot;margin-left: 4rem&quot;&gt;
    &lt;li&gt;the ncurses-style interface&lt;/li&gt;
    &lt;li&gt;expanding the interpreter to support structs, classes, other missing forms &lt;/li&gt;
    &lt;li&gt;modify the autocompleter to support class method names&lt;/li&gt;
    &lt;li&gt;job control (fg, bg, jobs)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;New releases will be posted on this blog detailing whats new in the release.&lt;/p&gt;
</description>
        <pubDate>Tue, 11 Jul 2017 00:00:00 -0400</pubDate>
        <link>https://patricklafferty.ca/blog/2017/07/11/lush/</link>
        <guid isPermaLink="true">https://patricklafferty.ca/blog/2017/07/11/lush/</guid>
        
        <category>dev</category>
        
        <category>lush</category>
        
        
      </item>
    
      <item>
        <title>Dev Environment</title>
        <description>&lt;p&gt;This post describes my current web dev environment for a friend that was curious about it. I had these requirements when coming up with it:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;it had to be fast and light on memory &lt;em&gt;and&lt;/em&gt; disk space - my box has a 1.33Ghz quad-core Atom, 2GB of ram and 32GB of space of which Windows and friends take up a big chunk&lt;/li&gt;
  &lt;li&gt;it had to be fully featured and $EDITOR must be or have Vim bindings&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I based the environment on running Arch Linux inside VirtualBox. I prefer Arch because I love pacman, out of all the distro package managers its the only one I feel that just.always.works, I’ve never got it into a critically broken state (hello aptitude, yum), and allows me to stay on the bleeding edge with new updates. Arch is also minimalistic, you pay for what you get allowing me to keep the virtual image small. A nice bonus about running a VM is that you can save the exact state of the machine before you shutdown your real one. So at night you just stop the VM and in the morning when you start up you are right back where you left off, no need to startup your editor and open the files you left off at.&lt;/p&gt;

&lt;h1 id=&quot;editor&quot;&gt;Editor&lt;/h1&gt;

&lt;p&gt;For my editor I use Vim currently with powerline and vim-surround. I can’t &lt;strong&gt;not&lt;/strong&gt; use Vim anymore, I keep learning new things to improve my experience. For example: sometime after starting some HTML5 practice, I learned about the tag blocks &lt;code class=&quot;highlighter-rouge&quot;&gt;at&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;it&lt;/code&gt;. Adding &lt;code class=&quot;highlighter-rouge&quot;&gt;at&lt;/code&gt; to a command selects the entire element from the beginning tag to the ending, while &lt;code class=&quot;highlighter-rouge&quot;&gt;it&lt;/code&gt; selects everything except the starting/closing tags. So with the following html:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-html&quot; data-lang=&quot;html&quot;&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;div&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;p&amp;gt;&lt;/span&gt;...&lt;span class=&quot;nt&quot;&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;form&amp;gt;&lt;/span&gt;...&lt;span class=&quot;nt&quot;&gt;&amp;lt;/form&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;section&amp;gt;&lt;/span&gt;...&lt;span class=&quot;nt&quot;&gt;&amp;lt;section&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;and the cursor is on the beginning div line,&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;gt;at&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;at&lt;/code&gt; increases/decreases the indent respectively of the entire div&lt;/li&gt;
  &lt;li&gt;plus the standard &lt;code class=&quot;highlighter-rouge&quot;&gt;y&lt;/code&gt;ank, &lt;code class=&quot;highlighter-rouge&quot;&gt;p&lt;/code&gt;ut, &lt;code class=&quot;highlighter-rouge&quot;&gt;d&lt;/code&gt;elete and &lt;code class=&quot;highlighter-rouge&quot;&gt;c&lt;/code&gt;hange operators (and all the rest) give you a lot of control, say you wanted to change everything in the div: just type cit in normal mode and the inner contents are deleted and you are put in insert mode inside the div&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;With vim-surround you can do things like surrounding/changing/removing things around things. So if we wanted the &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;p&amp;gt;&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;form&amp;gt;&lt;/code&gt; to be inside a div we could do &lt;code class=&quot;highlighter-rouge&quot;&gt;ysj&amp;lt;div&amp;gt;&lt;/code&gt;, or if we wanted to switch the &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;p&amp;gt;&lt;/code&gt; to a &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;div&amp;gt;&lt;/code&gt; we could do &lt;code class=&quot;highlighter-rouge&quot;&gt;cst&amp;lt;div&amp;gt;&lt;/code&gt; with the cursor inside the &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;p&amp;gt;&lt;/code&gt;. For the yank/put/delete/change ops I originally wrote them as (y)/(p) etc but then decided to switch to use highlighting so with a simple &lt;code class=&quot;highlighter-rouge&quot;&gt;cs) `&lt;/code&gt; they changed to &lt;code class=&quot;highlighter-rouge&quot;&gt;`y`&lt;/code&gt; /&lt;code class=&quot;highlighter-rouge&quot;&gt;`p`&lt;/code&gt;.&lt;/p&gt;

&lt;h1 id=&quot;shell&quot;&gt;Shell&lt;/h1&gt;

&lt;p&gt;I’ve been using bash for years, so I picked zsh to learn something new. Zsh has some cool features, like:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;extended globbing (&lt;code class=&quot;highlighter-rouge&quot;&gt;grep &quot;foo&quot; **/*.js&lt;/code&gt; will recursively search all .js files in subdirs)&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://zshwiki.org/home/builtin/functions/zmv&quot;&gt;zmv&lt;/a&gt;, zcp are replacements for mv/cp that you can define patterns to rename many files at once&lt;/li&gt;
  &lt;li&gt;autocompletion (of arguments (git st&lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;TAB&amp;gt;&lt;/code&gt; will show you all args that start with st), paths (ls /h/p/d&lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;TAB&amp;gt;&lt;/code&gt; could expand to /home/patrick/downloads), commands)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Searching “why zsh” will bring up a number of good sites with examples. Along with zsh I use &lt;a href=&quot;http://powerline.readthedocs.io/en/master/index.html&quot;&gt;powerline&lt;/a&gt;. It basically makes the prompt look cool and configures it to show useful information, along with a second prompt to the right of the screen. Finishing up the trifecta comes &lt;a href=&quot;https://tmux.github.io&quot;&gt;Tmux&lt;/a&gt;, a terminal multiplexer. Basically it allows you to split up the screen to have multiple shells running in splitscreen mode, among other features. In the screenshot below I split the screen vertically once then split the right side horizontally. The large left pane hosts Vim, the top right is running a jekyll server that rebuilds this blogpost as I change it, the bottom right is for misc things, &lt;code class=&quot;highlighter-rouge&quot;&gt;wc -l *&lt;/code&gt; in this example.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/blogposts/dev_environment.png&quot; alt=&quot;Dev environment screenshot&quot; /&gt;&lt;/p&gt;

&lt;h1 id=&quot;runners-up&quot;&gt;Runners up&lt;/h1&gt;

&lt;p&gt;Choices that didn’t quite make the final cut but are still very nice are listed below.&lt;/p&gt;

&lt;h3 id=&quot;visual-studio-code--msys2&quot;&gt;Visual Studio Code + MSYS2&lt;/h3&gt;

&lt;p&gt;&lt;a href=&quot;https://code.visualstudio.com&quot;&gt;VS Code&lt;/a&gt; is &lt;em&gt;really cool&lt;/em&gt;. It runs on Windows/Linux/Mac. Its &lt;a href=&quot;https://github.com/Microsoft/vscode&quot;&gt;open source&lt;/a&gt; using the MIT license. Intellisense and debugging and extensions everywhere! Stop reading this and go check it out!… &lt;em&gt;But&lt;/em&gt;, when using the vim extension (which we know is essential) on my mighty tablet, I could type out a line of code, take a sip of coffee, look out the window, look back and the line might just finish showing up. Maybe someday.&lt;/p&gt;

&lt;h3 id=&quot;windows-subsystem-for-linux&quot;&gt;Windows Subsystem for Linux&lt;/h3&gt;

&lt;p&gt;Special mention goes to &lt;a href=&quot;https://msdn.microsoft.com/commandline/wsl/about&quot;&gt;WSL&lt;/a&gt; or informally Bash on Ubuntu on Windows. With it you have the entire Ubuntu user space natively accessible on Windows. Once WSL is setup you can go to bash and apt-get something, it will get the native binary from Ubuntu’s servers. So you could in theory run an old 16-bit Win/Dos program inside wine inside bash on windows - Windows on Linux on Windows… &lt;em&gt;we need to go deeper&lt;/em&gt;. Caveat: it only works on 64-bit editions of Windows. Who cares, its $CURRENT_YEAR! Well this cheapo tablet I work on is limited to 32-bit Windows, even though it has a 64-bit cpu. Which is why I opted for the above VirtualBox config. WSL has some teething issues (still limited to 16 colours, and support for inotify hasn’t been released yet but is coming soon) but its something I am very much looking forwards to using when I can.&lt;/p&gt;

</description>
        <pubDate>Thu, 03 Nov 2016 00:00:00 -0400</pubDate>
        <link>https://patricklafferty.ca/blog/2016/11/03/dev-environment/</link>
        <guid isPermaLink="true">https://patricklafferty.ca/blog/2016/11/03/dev-environment/</guid>
        
        <category>dev</category>
        
        
      </item>
    
      <item>
        <title>SpaceYYZ is now live</title>
        <description>&lt;p&gt;&lt;a href=&quot;https://patrick-lafferty.github.io/spaceyyz&quot;&gt;SpaceYYZ&lt;/a&gt; is now hosted on github. SpaceYYZ is a single page application for the fictional company SpaceYYZ that they would use to manage their transportation services. I created it so I could learn about web development and apply concepts I learned. The sourcecode is hosted on &lt;a href=&quot;https://github.com/patrick-lafferty/spaceyyz&quot;&gt;my github&lt;/a&gt;. Feel free to browse the code and post issues on the public tracker.&lt;/p&gt;

&lt;p&gt;I am interested in a career in web development, so I was looking for an interesting project I could continually work on to develop my skills. I also wanted something that I could apply my existing skills from different development fields. SpaceYYZ uses AngularJS along with Angular UI and Angular UI Router, with some Bootstrap to taste, and Firebase for the database and authentication. My background in WPF turned out to be useful in quickly learning Angular since I already had experience structuring apps using MVVM and using databinding.&lt;/p&gt;

&lt;p&gt;I’m currently using vanilla ECMAScript 5, with an eye on either using ES 6 via Babel, or Typescript in the future. Coming from a purely statically typed background, learning Typescript is appealing as I’ve noticed on a few occasions that I’ve made type errors where variables were assumed to be one type but were actually another. One case in particular was sneaky, where I assumed a vehicle’s capacity was a number but was actually a string, and due to the numbers I used for testing they just happened to sort the same way lexicographically as they did numerically, so I didn’t notice the error until later. Being used to compilers pointing out dumb mistakes spoiled me, thats something I’ll have to pay attention to now.&lt;/p&gt;

&lt;p&gt;I’ll be continually working on SpaceYYZ for the near future and may post some updates on the status or what I’ve learned on my blog here.&lt;/p&gt;

</description>
        <pubDate>Tue, 25 Oct 2016 00:00:00 -0400</pubDate>
        <link>https://patricklafferty.ca/blog/2016/10/25/spaceyyz/</link>
        <guid isPermaLink="true">https://patricklafferty.ca/blog/2016/10/25/spaceyyz/</guid>
        
        <category>portfolio</category>
        
        
      </item>
    
      <item>
        <title>Aitu is now on github</title>
        <description>&lt;p&gt;&lt;a href=&quot;https://github.com/patrick-lafferty/aitu&quot;&gt;Aitu&lt;/a&gt; is now hosted on github. Aitu is an extract of the AI portion of Wooden Sphere. It uses a combination of &lt;a href=&quot;wikipedia.org/wiki/Hierarchical_task_network&quot;&gt;Hierarchical Task Networks&lt;/a&gt; and a Utility system to allow AI characters to decide on a goal and create a plan to achieve their goal.&lt;/p&gt;

&lt;h1 id=&quot;tasks-and-plans&quot;&gt;Tasks and plans&lt;/h1&gt;

&lt;p&gt;Tasks are the building blocks of this system. A Task is something that an AI character can do. They can have an Action enum which your code can switch on and perform some action. They can also have three std::function objects which get run at different times and can manipulate a WorldState object belonging to some character. Tasks have pre and post conditions which look at some WorldState property to determine their truthiness.&lt;/p&gt;

&lt;p&gt;Plans are a list of tasks to be completed in sequential order. When creating a plan for some goal task, the planner looks at the preconditions for that task and see if any other tasks can satisfy those conditions. That is, for a goal task G it looks for any task T where T’s postconditions match G’s preconditions. Then if T has preconditions it looks for tasks that can satisfy those, etc. A plan then is a chain of tasks starting with something that has no other preconditions/can be started right away, and each successive task does something that allows the next task to be run, until finally reaching the goal task.&lt;/p&gt;

&lt;p&gt;I chose this design because I wanted a flexible AI with the possibility of emergent gameplay. Since I never explicitly define dependencies between tasks but instead just expose their requirements, its easy to add in a new independent task which the planner can then pick up and use so long as it meets their requirements. No need to modify other tasks to make use of the new one, just define the task and the planner figures it out. And because of that you can get scenarios where the planner chose something unexpectely, since it just looks for &lt;em&gt;anything&lt;/em&gt; that satisfies some condition. So some task that you added for one reason might find itself being used in a way you (or the player) didn’t predict.&lt;/p&gt;

&lt;h1 id=&quot;utility-and-considerations&quot;&gt;Utility and considerations&lt;/h1&gt;

&lt;p&gt;So that covers what plans are and how they get created, but how does the AI choose a goal in the first place? Enter considerations. A Consideration is something that looks at some aspect of the character’s WorldState and gives it a score. Tasks can have multiple considerations associated with them, each one looking at one particular aspect of the world state. The task with the highest score becomes the goal. To calculate a consideration’s score you pick some function (linear, exponential, log etc), define the constants for that function (the ABC’s in ax^2 + bx + c) and select the input source that gets evaluated by that function. Currently you can pick any value in WorldState, as well as other sources such as the number of tasks run since some target task (to limit repeats). To make it simple to edit considerations I made the &lt;a href=&quot;/projects/woodensphere#considerationEditor&quot;&gt;ConsiderationEditor&lt;/a&gt; for Unreal Editor.&lt;/p&gt;

&lt;p&gt;So that wraps up the summary for Aitu, feel free to take a look at it on github.&lt;/p&gt;
</description>
        <pubDate>Wed, 07 Sep 2016 00:00:00 -0400</pubDate>
        <link>https://patricklafferty.ca/blog/2016/09/07/aitu/</link>
        <guid isPermaLink="true">https://patricklafferty.ca/blog/2016/09/07/aitu/</guid>
        
        <category>portfolio</category>
        
        
      </item>
    
  </channel>
</rss>
